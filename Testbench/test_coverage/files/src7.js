var g_data = {"name":"APB_seq_item.svh","src":"// APB_seq_item.svh\n// -----------------------------------------------------------------------------\n// This file contains the DPI function implementations for the APB_seq_item_pkg.\n// These functions are exported via DPI-C in the package file and provide the\n// functionality required by pyquesta for object exchange between SystemVerilog\n// and Python.\n// -----------------------------------------------------------------------------\n\nfunction string sv_get;\n    APB_seq_item obj;\n    string obj_str;\n    // Create a new transaction object\n    obj = new();\n\n    // Randomize the object with constraints\n    void'(obj.randomize() with {\n        PRESETn dist { 1 :/ 90, 0 :/ 10 };\n        PENABLE dist { 1 :/ 90, 0 :/ 10 };\n        PWDATA dist {\n            32'h00000000 :/ 20,\n            [32'h00000001:32'hFFFFFFFE] :/ 60,\n            32'hFFFFFFFF :/ 20\n        };\n        if (PWRITE == 0) { PWDATA == 0; }\n        PADDR inside { [32'h00000000:32'h0000003C] };\n        (PADDR % 4) == 0;\n    });\n\n    // Serialize the object and return the string\n    obj_str = obj.serialize();\n    return obj_str;\nendfunction\n\ncovergroup APB_cg with function sample(APB_seq_item item);\n    PRESETn_cp: coverpoint item.PRESETn {\n        bins reset_active   = {1};\n        bins reset_inactive = {0};\n    }\n    PENABLE_cp: coverpoint item.PENABLE {\n        bins enabled   = {1};\n        bins disabled  = {0};\n    }\n    PWRITE_cp:  coverpoint item.PWRITE  {\n        bins write = {1};\n        bins read  = {0};\n    }\n    PADDR_cp:   coverpoint item.PADDR   {\n        bins aligned_addr[] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60};\n    }\n    PWDATA_cp:  coverpoint item.PWDATA  {\n        bins zero     = {32'h0};\n        bins max      = {32'hFFFFFFFF};\n        bins typical  = {[32'h1:32'hFFFFFFFE]};\n    }\n    WRITE_x_DATA: cross PWRITE_cp, PWDATA_cp {\n        ignore_bins read_nonzero = binsof(PWRITE_cp.read) && binsof(PWDATA_cp.typical); // Ensures read transactions have PWDATA=0 (as per the constraint)\n    }\n    WRITE_x_ADDR: cross PWRITE_cp, PADDR_cp;\nendgroup\n\n// Global coverage instance\nAPB_cg cov_inst = new();\n\nfunction void sv_put(input string data_buf);\n    APB_seq_item obj;\n    obj = new();\n    obj.deserialize(data_buf);\n\n    // ===== Debug Control =====\n    `ifdef DEBUG_SVCONDUIT\n        $display(\"=============================================\");\n        $display(\"[SV] Received: %s\", data_buf);\n        $display(\"[SV] Deserialized Item:\");\n        $display(\"  PRESETn = %0d\", obj.PRESETn);\n        $display(\"  PWDATA  = 0x%8h\", obj.PWDATA);\n        $display(\"  PENABLE = %0d\", obj.PENABLE);\n        $display(\"  PWRITE  = %0d\", obj.PWRITE);\n        $display(\"  PADDR   = 0x%8h\", obj.PADDR);\n        $display(\"=============================================\");\n    `endif\n    // ========================\n\n    cov_inst.sample(obj);\nendfunction\n\nfunction string sv_transport(input string data_buf);\n    // Optional implementation for transporting data.\n    return \"\";\nendfunction","lang":"verilog"};
processSrcData(g_data);