var g_data = {"name":"../RTL/APB_Slave.sv","src":"module APB_Slave #(\n    parameter DATA_WIDTH = 32,\n    parameter ADDR_WIDTH = 32,\n    parameter NO_SLAVES  = 1\n) (\n`ifdef AMBA4\n      input [DATA_WIDTH/8 -1 : 0]  PSTRB       , \n      input [2:0]                  PPROT       , \n      output reg [DATA_WIDTH/8 -1 : 0] RegSTRB ,\n      output reg [2:0]                 RegPROT ,\n`endif \n// PSI => Previous System IN\n// PSO => Previous System OUT\n// Global Sinals\n    input PCLK                                 ,\n    input PRESETn                              ,  \n\n// input SLAVE FROM MASTER  \n    input [ADDR_WIDTH-1 : 0]     PADDR         ,\n    input                        PWRITE        ,\n    input [DATA_WIDTH-1 : 0]     PWDATA        ,\n    input                        PENABLE       ,\n\n// input SLAVE FROM REG_FILE  \n    input [DATA_WIDTH-1 : 0]     RegRDATA      ,\n    input                        RegSLVERR     ,\n    input                        RegREADY      ,\n    input [NO_SLAVES-1 : 0]      PSELx         ,\n  \n// output SLAVE TO MASTER  \n    output reg                       PREADY    ,\n    output reg [DATA_WIDTH-1 : 0]    PRDATA    ,\n    output reg                       PSLVERR   ,\n\n// output SLAVE TO REG_FILE  \n    output reg [ADDR_WIDTH-1 : 0]    RegADDR   ,\n    output reg [DATA_WIDTH-1 : 0]    RegWDATA  ,\n    output reg                       RegENABLE,\n    output reg                       RegWRITE\n);\n    \n    import shared_pkg::*;\n    state_e NextState, CurrentState;\n    \n// Next State Logic\n    always @(*) begin\n        case (CurrentState)\n            IDLE: begin\n                if (PENABLE) begin\n                    NextState <= SETUP;\n                end\n                else begin\n                    NextState <= IDLE;\n                end\n            end\n            SETUP: begin\n                NextState <= ACCESS;\n            end\n            ACCESS: begin\n                if (PSLVERR) begin\n                    NextState <= IDLE;\n                end \n                else begin\n                    if (RegREADY & PENABLE) begin\n                        NextState <= SETUP;\n                    end \n                    else if (RegREADY & !PENABLE) begin\n                        NextState <= IDLE;\n                    end\n                    else begin\n                        NextState <= ACCESS;\n                    end\n                end\n            end\n        endcase\n    end\n\n// State Memory\n    always @(posedge PCLK or negedge PRESETn) begin\n        if (!PRESETn) begin\n            CurrentState = IDLE;\n        end else begin\n            CurrentState = NextState;\n        end\n    end\n\n    \n// output Logic\n    always @(posedge PCLK or negedge PRESETn) begin\n        if (!PRESETn) begin\n            RegENABLE    <= 0;\n            RegADDR      <= 0; \n            RegWRITE     <= 0;\n            PREADY       <= 0;\n            PRDATA       <= 0;\n            PSLVERR      <= 0;\n            RegWDATA     <= 0;\n            `ifdef AMBA4\n            RegSTRB      <= 0;\n            RegPROT      <= 0;\n            `endif\n        end\n        else if (CurrentState == SETUP) begin\n            RegENABLE   <= PENABLE  ;\n            PREADY      <= 0        ;\n            RegADDR     <= PADDR    ; \n            RegWRITE    <= PWRITE   ;\n            if (PWRITE == 1) begin // WRITE\n                RegWDATA <= PWDATA;\n                `ifdef AMBA4\n                RegSTRB <= PSTRB;\n                `endif\n            end else if (PWRITE == 0) begin // READ \n                `ifdef AMBA4\n                RegSTRB <= 'b0;\n                `endif\n            end\n        end\n        else if (CurrentState == ACCESS) begin\n            RegENABLE = 1;\n            `ifdef AMBA4\n            RegPROT <= PPROT;\n            `endif\n            if (RegREADY == 1) begin\n                if (PWRITE == 0) begin\n                    PRDATA <= RegRDATA;\n                end\n                PSLVERR <= PSLVERR;\n            end\n                PREADY <= RegREADY;\n        end\n        else begin\n            RegENABLE = 0;\n            PREADY    = 0;\n        end\n    end\n\n// // ADDRESS Decoding\n//     always @(posedge PCLK or negedge PRESETn) begin\n//         if (!PRESETn) begin\n//             PSELx <= 'b0;\n//         end\n//         else if (NextState == IDLE) begin\n//             PSELx <= 'b0;\n//         end\n//         else begin\n//             case (PADDR[31:30])\n//                 'b00: PSELx <= 4'b0001;\n//                 'b01: PSELx <= 4'b0010;\n//                 'b10: PSELx <= 4'b0100;\n//                 'b11: PSELx <= 4'b1000;\n//                 default: begin\n//                    PSELx <= 'b0;\n//                 end\n//             endcase\n//         end\n//     end\nendmodule","lang":"verilog"};
processSrcData(g_data);