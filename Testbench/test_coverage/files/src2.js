var g_data = {"name":"../RTL/APB_Wrapper.sv","src":"module APB_Wrapper #(\n    parameter DATA_WIDTH = 32				 ,\n    parameter ADDR_WIDTH = 32				 ,\n    parameter NO_SLAVES  = 1					\n) (\n`ifdef AMBA4\n	input [DATA_WIDTH/8 -1 : 0] 	PSTRB  	 , \n	input [2:0]                 	PPROT  	 , \n`endif \n\n// Global Sinals\n    input 						 	PCLK     ,  \n    input 						 	PRESETn  ,  \n\n// Slave FROM Master\n    input [ADDR_WIDTH-1 : 0]     	PADDR    ,\n    input                        	PWRITE   ,\n    input [DATA_WIDTH-1 : 0]     	PWDATA   ,\n    input                        	PENABLE  ,\n    input                           PSELx    ,\n\n// Slave TO Master\n    output                          PREADY   ,\n    output [DATA_WIDTH-1 : 0]    	PRDATA   ,\n    output                       	PSLVERR 	\n);\n\n// input Slave FROM RegisterFile\n    wire [DATA_WIDTH-1 : 0]     RegRDATA    ;\n    wire                        RegSLVERR   ;\n    wire                        RegREADY    ;\n\n// output Slave TO RegisterFile\n    wire [ADDR_WIDTH-1 : 0]    RegADDR      ;\n    wire [DATA_WIDTH-1 : 0]    RegWDATA     ;\n    wire                       RegWRITE     ;\n    wire                       RegENABLE    ;\n\nRegisterFile #(\n    .DATA_WIDTH(DATA_WIDTH) ,\n    .ADDR_WIDTH(ADDR_WIDTH) ,\n    .NO_SLAVES(NO_SLAVES)\n)reg_file(\n`ifdef AMBA4\n    .RegSTRB(RegSTRB)       ,\n    .RegPROT(RegPROT)       ,\n`endif \n\n    .PCLK(PCLK)             ,\n    .PRESETn(PRESETn)       ,\n\n    .RegADDR(RegADDR)       ,\n    .RegWDATA(RegWDATA)     ,\n    .RegWRITE(RegWRITE)     ,\n    .RegENABLE(RegENABLE)   ,\n\n    .RegRDATA(RegRDATA)     ,\n    .RegSLVERR(RegSLVERR)   , \n    .RegREADY(RegREADY)   \n);\n\nAPB_Slave #(\n    .DATA_WIDTH(DATA_WIDTH) ,\n    .ADDR_WIDTH(ADDR_WIDTH) ,\n    .NO_SLAVES(NO_SLAVES)\n)apb_slave(\n    `ifdef AMBA4\n    .PSI_STRB(PSI_STRB)     ,\n    .PSI_PROT(PSI_PROT)     ,\n    .PSTRB(PSTRB)           ,\n    .PPROT(PPROT)           ,\n    `endif \n// PSI => Previous System IN\n// PSO => Previous System OUT\n// Global Sinals\n    .PCLK(PCLK)             ,\n    .PRESETn(PRESETn)       ,\n\n// input Slave FROM Master\n    .PSELx(PSELx)           ,\n    .PADDR(PADDR)           ,\n    .PWRITE(PWRITE)         ,\n    .PWDATA(PWDATA)         ,\n    .PENABLE(PENABLE)       ,\n// input Slave FROM RegisterFile\n    .RegRDATA(RegRDATA)     ,\n    .RegSLVERR(RegSLVERR)   ,\n    .RegENABLE(RegENABLE),\n    .RegREADY(RegREADY)     ,\n\n// output Slave TO Master\n    .PREADY(PREADY)         ,\n    .PRDATA(PRDATA)         ,\n    .PSLVERR(PSLVERR)       ,\n\n// output Slave TO RegisterFile\n    .RegADDR(RegADDR)       ,\n    .RegWDATA(RegWDATA)     ,\n    .RegWRITE(RegWRITE)\n);\ndummy_dpi_initializer dummy_dpi_initializer_inst();    \nendmodule","lang":"verilog"};
processSrcData(g_data);