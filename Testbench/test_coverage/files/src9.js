var g_data = {"name":"APB_SVA.sv","src":"// Copyright 2023 Mihael Fugenfirov\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// \r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n\r\nmodule APB_SVA #(\r\n    parameter DATA_WIDTH = 32				 ,\r\n    parameter ADDR_WIDTH = 32				 ,\r\n    parameter NO_SLAVES  = 1					\r\n) (\r\n`ifdef AMBA4\r\n	input [DATA_WIDTH/8 -1 : 0] 	PSTRB  	 , \r\n	input [2:0]                 	PPROT  	 , \r\n`endif \r\n\r\n// Global Sinals\r\n    input 						 	PCLK     ,  \r\n    input 						 	PRESETn  ,  \r\n\r\n// PSI => Previous System IN\r\n// PSO => Previous System OUT\r\n\r\n// Slave FROM Master\r\n    input [ADDR_WIDTH-1 : 0]     	PADDR    ,\r\n    input                        	PWRITE   ,\r\n    input [DATA_WIDTH-1 : 0]     	PWDATA   ,\r\n    input                        	PENABLE  ,\r\n    input                           PSELx    ,\r\n\r\n// Slave TO Master\r\n    input                          PREADY   ,\r\n    input [DATA_WIDTH-1 : 0]    	PRDATA   ,\r\n    input                       	PSLVERR 	\r\n);\r\n\r\n`ifndef APB_DATA_WIDTH\r\n   `define APB_DATA_WIDTH 32\r\n`endif\r\n`ifndef APB_ADDR_WIDTH\r\n   `define APB_ADDR_WIDTH 32\r\n`endif\r\n\r\nassert property (@(posedge PCLK) (!PRESETn) |=> (PRDATA == 0));\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// SVA\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n                                        // Modifications on the original code (each modification is either followed or preceded by a comment starting with \"Modification\")\r\n                                        // Modification: included the assertions inside of a module instead of interface \r\n\r\n//----- Sequences -----\r\n//phases\r\nsequence idle_phase ;\r\n   PRESETn ;                            // Modification: Replaced PSEL by PRESETn as my testbench doesn't drive PSEL so far\r\nendsequence\r\nsequence setup_phase ;\r\n   PRESETn && !PENABLE ;                // Modification: same as first Modification\r\nendsequence\r\nsequence access_phase_wait ;\r\n   PRESETn && PENABLE && !PREADY ;      // Modification: same as first Modification\r\nendsequence\r\nsequence access_phase_last ;\r\n   PRESETn && PENABLE && PREADY ;       // Modification: same as first Modification\r\nendsequence\r\n\r\n//----- Properties -----\r\n//parametric property to check signal is not X/Z\r\nproperty pr_generic_not_unknown (signal) ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      !$isunknown(signal) ;\r\nendproperty \r\n//parametric property to check if signal stable during the transfer. If the signal changed means the state became IDLE or SETUP, i.e. the transfer just finished.\r\nproperty pr_generic_stable(signal) ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      !$stable(signal) |-> setup_phase or idle_phase ;\r\nendproperty\r\n//same as pr_generic_stable but for PWDATA. it should be stable only in WRITE transfers, i.e. PWRITE=1\r\nproperty pwdata_in_wr_transfer ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      !$stable(PWDATA) |-> (!PWRITE) or (setup_phase or idle_phase) ;\r\nendproperty\r\n// for PENABLE and PSEL i can't use phases, since the phases are defined using these lines\r\nproperty penable_in_transfer ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      $fell(PENABLE) |-> idle_phase or ($past(PENABLE) && $past(PREADY)) ;\r\nendproperty\r\n//check if PSEL stable during transfer. i.e. PSEL can fall only after tranfer completed (PREADY=1)\r\n                                        // Modification: Removed this property\r\n// property psel_stable_in_transfer ;\r\n   // @(posedge PCLK) disable iff(!PRESETn)\r\n      // !PSEL && $past(PSEL) |-> $past(PENABLE) && $past(PREADY) ; //The antecedent is NOT equal to ($fell) since 'X'->'0' also activates $fell\r\n// endproperty\r\n//PSRTB must be driven low at read transfer\r\n                                        // Modification: Removed this property\r\n// property pstrb_low_at_read ;\r\n   // @(posedge PCLK) disable iff(!PRESETn)\r\n      // PSEL && !PWRITE |-> PSTRB == {(`APB_DATA_WIDTH/8){1'b0}} ;\r\n// endproperty\r\n\r\n//Operating States (see chapter 4 in APB5 documentation)\r\nproperty idle_state ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      idle_phase |=> idle_phase or setup_phase ;\r\nendproperty\r\nproperty setup_state ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      setup_phase |=> access_phase_wait or access_phase_last ;\r\nendproperty\r\nproperty access_wait_state ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      access_phase_wait |=> access_phase_wait or access_phase_last ;\r\nendproperty\r\nproperty access_last_state ;\r\n   @(posedge PCLK) disable iff(!PRESETn)\r\n      access_phase_last |=> idle_phase or setup_phase ;\r\nendproperty\r\n\r\n//----- Assertions -----\r\n// check all signal for being valid. The protocol doesn't actualy require this. only PSEL must be always valid.\r\n                                        // Modification: Removed this assertion\r\n// PSEL_never_X    : assert property (pr_generic_not_unknown(PSEL   )) else $display(\"[%0t] Error! PSEL is unknown (=X/Z)\", $time) ;\r\nPWRITE_never_X  : assert property (pr_generic_not_unknown(PWRITE )) else $display(\"[%0t] Error! PWRITE is unknown (=X/Z)\", $time) ;\r\nPENABLE_never_X : assert property (pr_generic_not_unknown(PENABLE)) else $display(\"[%0t] Error! PENABLE is unknown (=X/Z)\", $time) ;\r\nPREADY_never_X  : assert property (pr_generic_not_unknown(PREADY )) else $display(\"[%0t] Error! PREADY is unknown (=X/Z)\", $time) ;\r\nPADDR_never_X   : assert property (pr_generic_not_unknown(PADDR  )) else $display(\"[%0t] Error! PADDR is unknown (=X/Z)\", $time) ;\r\nPWDATA_never_X  : assert property (pr_generic_not_unknown(PWDATA )) else $display(\"[%0t] Error! PWDATA is unknown (=X/Z)\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PRDATA_never_X  : assert property (pr_generic_not_unknown(PRDATA )) else $display(\"[%0t] Error! PRDATA is unknown (=X/Z)\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PSTRB_never_X   : assert property (pr_generic_not_unknown(PSTRB  )) else $display(\"[%0t] Error! PSTRB is unknown (=X/Z)\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PPROT_never_X   : assert property (pr_generic_not_unknown(PPROT  )) else $display(\"[%0t] Error! PPROT is unknown (=X/Z)\", $time) ;\r\n\r\n//check signals stability during a transfer (section 4.1 in APB5 documentation)\r\nPADDR_stable_in_transfer     : assert property (pr_generic_stable(PADDR ))  else $display(\"[%0t] Error! PADDR must not change throughout the transfer\", $time) ;\r\nPWRITE_stable_in_transfer    : assert property (pr_generic_stable(PWRITE))  else $display(\"[%0t] Error! PWRITE must not change throughout the transfer\", $time) ;\r\nPENABLE_stable_in_transfer   : assert property (penable_in_transfer)        else $display(\"[%0t] Error! PENABLE must not change throughout the access phase\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PSEL_stable_in_transfer      : assert property (psel_stable_in_transfer)    else $display(\"[%0t] Error! PSEL must not change throughout the transfer\", $time) ;\r\nPWDATA_stable_in_wr_transfer : assert property (pwdata_in_wr_transfer)      else $display(\"[%0t] Error! PWDATA must not change throughout the write transfer\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PSTRB_stable_in_transfer     : assert property (pr_generic_stable(PSTRB))   else $display(\"[%0t] Error! PSTRB must not change throughout the transfer\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PSTRB_low_in_read_transfer   : assert property (pstrb_low_at_read)          else $display(\"[%0t] Error! PSTRB must be driven low in read transfer\", $time) ;\r\n                                        // Modification: Removed this assertion\r\n// PPROT_stable_in_transfer     : assert property (pr_generic_stable(PPROT))   else $display(\"[%0t] Error! PPROT must not change throughout the transfer\", $time) ;\r\nPSLVERR_stable_in_transfer   : assert property (pr_generic_stable(PSLVERR)) else $display(\"[%0t] Error! PSLVERR must not change throughout the transfer\", $time) ;\r\n\r\n                                        // Modification: Removed the following assertions\r\n//check transition between operational states of the protocol (section 4)\r\n  // Operating_state_idle        : assert property (idle_state)     \r\n  //                                 else $display(\"[%0t] Error! The transfer must start with setup phase (PSEL=1, PENABLE=0).\", $time) ;\r\n  // Operating_state_setup       : assert property (setup_state) \r\n  //                                 else $display(\"[%0t] Error! The setup phase must proceed to access phase (PSEL=1, PENABLE=0) after 1 clk.\", $time) ;\r\n  // Operating_state_access_wait : assert property (access_wait_state) \r\n  //                                 else $display(\"[%0t] Error! The transfer must stay in access phase (wait state (PREADY=0) or proceed to finish (PREADY=1).\", $time) ;\r\n  // Operating_state_access_last : assert property (access_last_state) \r\n  //                                 else $display(\"[%0t] Error! After a transfer finished, must proceed to IDLE (PSEL=0) or setup phase (PSEL=1, PENABLE=0).\",  $time) ;\r\n\r\nendmodule : APB_SVA","lang":"verilog"};
processSrcData(g_data);