var g_data = {"name":"APB_seq_item.svh","src":"/***********************************************************************\n * Author : Amr El Batarny\n * File   : APB_seq_item.svh\n * Brief  : DPI implementations (sv_get, sv_put, sv_transport) and\n *          covergroup for APB_seq_item.\n **********************************************************************/\n\nfunction string sv_get;\n    APB_seq_item obj;\n    string obj_str;\n    // Create a new transaction object\n    obj = new();\n\n    // Randomize the object with constraints\n    void'(obj.randomize() with {\n        type_sv inside { 0, 1 }; // 0=READ, 1=WRITE per Python APBType\n        if (type_sv) {\n            data dist {\n                32'h00000000 :/ 20,\n                [32'h00000001:32'hFFFFFFFE] :/ 60,\n                32'hFFFFFFFF :/ 20\n            };\n            strobe dist {[1:5]:/10, [6:10]:/20, [11:14]:/70, 15:/90};\n        }\n        else {\n            data == 0;\n            strobe == 0;\n        }\n        addr inside { [32'h00000000:32'h0000003C] };\n        (addr % 4) == 0;\n    });\n    // Serialize the object and return the string\n    obj_str = obj.serialize();\n    return obj_str;\nendfunction\n\ncovergroup APB_cg with function sample(APB_seq_item item);\n    type_cp:  coverpoint item.type_sv  {\n        bins write = {1};\n        bins read  = {0};\n    }\n    addr_cp:   coverpoint item.addr   {\n        bins aligned_addr[] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60};\n    }\n    data_cp:  coverpoint item.data  {\n        bins zero     = {32'h0};\n        bins max      = {32'hFFFFFFFF};\n        bins typical  = {[32'h1:32'hFFFFFFFE]};\n    }\n    write_x_data: cross type_cp, data_cp {\n        ignore_bins read_nonzero = binsof(type_cp.read) && binsof(data_cp.typical); // Ensures read transactions have data=0 (as per the constraint)\n    }\n    write_x_addr: cross type_cp, addr_cp;\nendgroup\n\n// Global coverage instance\nAPB_cg cov_inst = new();\n\nfunction void sv_put(input string data_buf);\n    APB_seq_item obj;\n    obj = new();\n    obj.deserialize(data_buf);\n\n    // ===== Debug Control =====\n    `ifdef DEBUG_SVCONDUIT\n        $display(\"=============================================\");\n        $display(\"[SV] Received: %s\", data_buf);\n        $display(\"[SV] Deserialized Item:\");\n        $display(\"  addr    = 0x%8h\", obj.addr);\n        $display(\"  data    = 0x%8h\", obj.data);\n        $display(\"  strobe  = 0x%2h\", obj.strobe);\n        $display(\"  type_sv    = 0x%2h\", obj.type_sv);\n        $display(\"=============================================\");\n    `endif\n    // ========================\n\n    cov_inst.sample(obj);\nendfunction\n\nfunction string sv_transport(input string data_buf);\n    // Optional implementation for transporting data.\n    return \"\";\nendfunction","lang":"verilog"};
processSrcData(g_data);