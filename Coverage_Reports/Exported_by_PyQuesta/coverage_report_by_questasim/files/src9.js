var g_data = {"name":"APB_SVA.sv","src":"/***********************************************************************\r\n * Author : Amr El Batarny\r\n * File   : APB_SVA.sv\r\n * Brief  : SystemVerilog assertions and properties for the APB interface.\r\n **********************************************************************/\r\n\r\nmodule APB_SVA #(\r\n	 parameter DATA_WIDTH = 32,\r\n	 parameter ADDR_WIDTH = 32,\r\n	 parameter NBYTES  = DATA_WIDTH/8\r\n	)(\r\n	// Global Signals\r\n	input wire									PCLK,\r\n	input wire									PRESETn,\r\n\r\n	// APB Signals\r\n	input wire									PSELx,\r\n	input wire [ADDR_WIDTH-1:0]	PADDR,\r\n	input wire									PWRITE,\r\n	input wire [NBYTES-1:0]			PSTRB,\r\n	input wire [DATA_WIDTH-1:0]	PWDATA,\r\n	input wire									PENABLE,\r\n	input wire [DATA_WIDTH-1:0]	PRDATA,\r\n	input wire									PREADY\r\n	);\r\n\r\n  //----------------------------------------------------------------------\r\n  // APB Phase Sequences\r\n  //----------------------------------------------------------------------\r\n  sequence setup_phase_s;\r\n    PSELx    &&\r\n    !PENABLE &&\r\n    !PREADY;\r\n  endsequence : setup_phase_s\r\n\r\n  sequence access_phase_s;\r\n    PSELx   &&\r\n    PENABLE &&\r\n    PREADY;\r\n  endsequence : access_phase_s\r\n\r\n  //----------------------------------------------------------------------\r\n  // 1. Protocol Handshake Properties\r\n  //----------------------------------------------------------------------\r\n  property p_pready_access;\r\n    @(posedge PCLK) disable iff(!PRESETn)\r\n      access_phase_s |-> PREADY;\r\n  endproperty : p_pready_access\r\n  ASSERT_PREADY_ACCESS: assert property (p_pready_access)\r\n    else $error(\"[ASSERT_PREADY_ACCESS] PREADY not asserted during ACCESS phase\");\r\n  COVER_PREADY_ACCESS: cover property (p_pready_access);\r\n\r\n  //----------------------------------------------------------------------\r\n  // 2. Signal Stability Properties\r\n  //----------------------------------------------------------------------\r\n  property p_addr_stable;\r\n    @(posedge PCLK) disable iff(!PRESETn)\r\n      setup_phase_s |=> ##1 $stable(PADDR);\r\n  endproperty : p_addr_stable\r\n  ASSERT_ADDR_STABLE: assert property (p_addr_stable)\r\n    else $error(\"[ASSERT_ADDR_STABLE] PADDR changed during ACCESS phase\");\r\n  COVER_ADDR_STABLE: cover property (p_addr_stable);\r\n\r\n  property p_ctrl_data_stable;\r\n    @(posedge PCLK) disable iff(!PRESETn)\r\n      setup_phase_s |=> ##1 ($stable(PWRITE) && $stable(PSTRB) && $stable(PWDATA));\r\n  endproperty : p_ctrl_data_stable\r\n  ASSERT_CTRL_DATA_STABLE: assert property (p_ctrl_data_stable)\r\n    else $error(\"[ASSERT_CTRL_DATA_STABLE] Control or write data signals changed during ACCESS phase\");\r\n  COVER_CTRL_DATA_STABLE: cover property (p_ctrl_data_stable);\r\n\r\n  //----------------------------------------------------------------------\r\n  // 3. Single-Cycle Access Timing\r\n  //----------------------------------------------------------------------\r\n  property p_single_cycle_ready;\r\n    @(posedge PCLK) disable iff(!PRESETn)\r\n      access_phase_s |=> ##1 (!PREADY);\r\n  endproperty : p_single_cycle_ready\r\n  ASSERT_SINGLE_CYCLE_READY: assert property (p_single_cycle_ready)\r\n    else $error(\"[ASSERT_SINGLE_CYCLE_READY] PREADY remained asserted beyond one cycle\");\r\n  COVER_SINGLE_CYCLE_READY: cover property (p_single_cycle_ready);\r\n\r\nendmodule : APB_SVA","lang":"verilog"};
processSrcData(g_data);