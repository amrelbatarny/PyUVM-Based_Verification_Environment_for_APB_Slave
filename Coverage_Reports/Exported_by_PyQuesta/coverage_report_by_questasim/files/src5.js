var g_data = {"name":"../RTL/APB_Slave.sv","src":"/***********************************************************************\n * Author : Amr El Batarny\n * File   : APB_Slave.sv\n * Brief  : Implements the APB slave module with register interface and\n *          control logic.\n **********************************************************************/\n\nmodule APB_Slave #(\n	parameter DATA_WIDTH	= 32,\n	parameter ADDR_WIDTH	= 32,\n	parameter NBYTES		= DATA_WIDTH/8\n	)(\n	// Global Signals\n	input wire PCLK,\n	input wire PRESETn,\n\n	// APB Signals\n	input wire						PSELx,\n	input wire [ADDR_WIDTH-1:0]		PADDR,\n	input wire						PWRITE,\n	input wire [NBYTES-1:0]			PSTRB,\n	input wire [DATA_WIDTH-1:0]		PWDATA,\n	input wire						PENABLE,\n	output reg						PREADY,\n\n	// Register File Signals\n	output reg [ADDR_WIDTH-1:0]	addr,\n	output reg					write_en,\n	output reg					read_en,\n	output reg [NBYTES-1:0]		byte_strobe,\n	output reg [DATA_WIDTH-1:0]	wdata\n	);\n\n	import shared_pkg::*;\n	state_e current_state, next_state;\n\n	// State Memory\n	always @(posedge PCLK or negedge PRESETn) begin\n        if (~PRESETn) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // Next State Logic\n    always_comb begin\n    	case(current_state)\n    		IDLE:\n    			if(PENABLE && PSELx)\n    				next_state = ACCESS;\n    			else\n    				next_state = IDLE;\n    		\n    		ACCESS:\n				next_state = IDLE;\n\n			default:\n				next_state = IDLE;\n    	endcase\n    end\n\n    // Output Logic\n	always @* begin\n		if(~PRESETn) begin\n			PREADY = 1'b0;\n		end else begin\n			if(current_state == IDLE)\n				PREADY = 1'b0;\n			else if(current_state == ACCESS) begin\n				addr 		= PADDR;\n				write_en	= (PWRITE == 1'b1)? 1'b1 : 1'b0;\n				read_en		= ~write_en;\n				byte_strobe	= PSTRB;\n				wdata		= PWDATA;\n				PREADY		= 1'b1;\n			end\n		end\n	end\n\nendmodule","lang":"verilog"};
processSrcData(g_data);